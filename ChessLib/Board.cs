///////////////////////////////////////////////////////////
//  Board.cs
//  Implementation of the Class Board
//  Generated by Enterprise Architect
//  Created on:      08-déc.-2008 15:47:28
//  Original author: Vincent
///////////////////////////////////////////////////////////

#region usings

using System;
using System.Collections.Generic;
using System.Linq;
using ChessLib.Pieces;

#endregion

namespace ChessLib
{
    ///<summary>
    ///
    ///</summary>
    public class Board
    {
        private readonly Game _parentGame;
        private readonly Dictionary<PieceColor, PiecesCollection> _piecesCollectionDictionary;


        ///<summary>
        ///
        ///</summary>
        ///<param name="parentGame"></param>
        public Board(Game parentGame)
        {
            this._piecesCollectionDictionary = new Dictionary<PieceColor, PiecesCollection>();
            this._parentGame = parentGame;

            var BlackPieces = new PiecesCollection();

            BlackPieces.Add(new Rook(this._parentGame, new PiecePosition(0, 7), PieceColor.Black));
            BlackPieces.Add(new Knight(this._parentGame, new PiecePosition(1, 7), PieceColor.Black));
            BlackPieces.Add(new Bishop(this._parentGame, new PiecePosition(2, 7), PieceColor.Black));
            BlackPieces.Add(new Queen(this._parentGame, new PiecePosition(3, 7), PieceColor.Black));
            BlackPieces.Add(new King(this._parentGame, new PiecePosition(4, 7), PieceColor.Black));
            BlackPieces.Add(new Bishop(this._parentGame, new PiecePosition(5, 7), PieceColor.Black));
            BlackPieces.Add(new Knight(this._parentGame, new PiecePosition(6, 7), PieceColor.Black));
            BlackPieces.Add(new Rook(this._parentGame, new PiecePosition(7, 7), PieceColor.Black));

            for (int i = 0; i < 8; i++)
            {
                BlackPieces.Add(new Pawn(this._parentGame, new PiecePosition(i, 6), PieceColor.Black));
            }

            var whitePieces = new PiecesCollection();

            whitePieces.Add(new Rook(this._parentGame, new PiecePosition(0, 0), PieceColor.White));
            whitePieces.Add(new Knight(this._parentGame, new PiecePosition(1, 0), PieceColor.White));
            whitePieces.Add(new Bishop(this._parentGame, new PiecePosition(2, 0), PieceColor.White));
            whitePieces.Add(new Queen(this._parentGame, new PiecePosition(3, 0), PieceColor.White));
            whitePieces.Add(new King(this._parentGame, new PiecePosition(4, 0), PieceColor.White));
            whitePieces.Add(new Bishop(this._parentGame, new PiecePosition(5, 0), PieceColor.White));
            whitePieces.Add(new Knight(this._parentGame, new PiecePosition(6, 0), PieceColor.White));
            whitePieces.Add(new Rook(this._parentGame, new PiecePosition(7, 0), PieceColor.White));

            for (int i = 0; i < 8; i++)
            {
                whitePieces.Add(new Pawn(this._parentGame, new PiecePosition(i, 1), PieceColor.White));
            }

            this._piecesCollectionDictionary.Add(PieceColor.White, whitePieces);
            this._piecesCollectionDictionary.Add(PieceColor.Black, BlackPieces);
        }

        ///<summary>
        ///
        ///</summary>
        ///<param name="pieceColor"></param>
        ///<returns></returns>
        public PiecesCollection GetPiecesCollection(PieceColor pieceColor)
        {
            return this._piecesCollectionDictionary[pieceColor];
        }


        ///<summary>
        ///
        ///</summary>
        ///<param name="piecePosition"></param>
        ///<returns></returns>
        public bool IsAvailablePosition(PiecePosition piecePosition)
        {
            return piecePosition.X >= 0 && piecePosition.X < 8 && piecePosition.Y >= 0 && piecePosition.Y < 8;
        }

        ///<summary>
        ///
        ///</summary>
        ///<param name="piecePosition"></param>
        ///<returns></returns>
        ///<exception cref="NotImplementedException"></exception>
        public BasePiece GetPiece(PiecePosition piecePosition)
        {
            IEnumerable<BasePiece> pieces = from piece in this.GetPiecesCollection(PieceColor.White) where piece.Position.Equals(piecePosition) select piece;

            if (pieces.Count() == 1)
            {
                return pieces.ElementAt(0);
            }

            pieces = from piece in this.GetPiecesCollection(PieceColor.Black) where piece.Position.Equals(piecePosition) select piece;

            if (pieces.Count() == 1)
            {
                return pieces.ElementAt(0);
            }

            return null;
        }
    }
}