///////////////////////////////////////////////////////////
//  Game.cs
//  Implementation of the Class Game
//  Generated by Enterprise Architect
//  Created on:      08-déc.-2008 15:47:34
//  Original author: Vincent
///////////////////////////////////////////////////////////

#region usings

using System.Collections.Generic;
using ChessLib.Actions;
using ChessLib.Pieces;

#endregion

namespace ChessLib
{
    ///<summary>
    ///
    ///</summary>
    public class Game
    {
        private readonly ActionsManager _actionsManager;
        private readonly Board _board;

        private readonly Dictionary<PieceColor, Player> _players;
        private Player _currentPlayer;

        ///<summary>
        ///
        ///</summary>
        public Game()
        {
            this._board = new Board(this);

            this._actionsManager = new ActionsManager();

            this._players = new Dictionary<PieceColor, Player>();
            this._players.Add(PieceColor.White, new Player(this, PieceColor.White));
            this._players.Add(PieceColor.Black, new Player(this, PieceColor.Black));

            this._currentPlayer = this._players[PieceColor.White];
        }

        ///<summary>
        ///
        ///</summary>
        public Board @Board
        {
            get { return this._board; }
        }

        ///<summary>
        ///
        ///</summary>
        public ActionsManager @ActionsManager
        {
            get { return this._actionsManager; }
        }

        ///<summary>
        ///
        ///</summary>
        public Player CurrentPlayer
        {
            get { return this._currentPlayer; }
        }

        ///<summary>
        ///
        ///</summary>
        ///<param name="pieceColor"></param>
        ///<returns></returns>
        public Player GetPlayer(PieceColor pieceColor)
        {
            return this._players[pieceColor];
        }

        ///<summary>
        ///
        ///</summary>
        ///<param name="piecePosition"></param>
        ///<param name="newPosition"></param>
        public void Play(PiecePosition piecePosition, PiecePosition newPosition)
        {
            BasePiece piece = this._board.GetPiece(piecePosition);

            if (piece == null || piece.Color != this.CurrentPlayer.Color)
            {
                return;
            }

            MoveAction simpleMoveAction = piece.GetMove(newPosition);

            if (simpleMoveAction == null)
            {
                return;
            }

            if (this.ActionsManager.Do(simpleMoveAction))
            {
                this._currentPlayer = (this.CurrentPlayer == this._players[PieceColor.White]) ? this._players[PieceColor.Black] : this._players[PieceColor.White];
            }
        }

        ///<summary>
        ///
        ///</summary>
        public void Undo()
        {
            if (this._actionsManager.UnDo()) this._currentPlayer = (this.CurrentPlayer == this._players[PieceColor.White]) ? this._players[PieceColor.Black] : this._players[PieceColor.White];
        }
    }
}