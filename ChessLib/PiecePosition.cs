///////////////////////////////////////////////////////////
//  PiecePosition.cs
//  Implementation of the Class PiecePosition
//  Generated by Enterprise Architect
//  Created on:      08-déc.-2008 15:47:35
//  Original author: Vincent
///////////////////////////////////////////////////////////

#region usings

using System;

#endregion

namespace ChessLib
{
    ///<summary>
    ///
    ///</summary>
    public class PiecePosition : IEquatable<PiecePosition>
    {
        ///<summary>
        ///
        ///</summary>
        ///<param name="x"></param>
        ///<param name="y"></param>
        public PiecePosition(int x, int y)
        {
            this.X = x;
            this.Y = y;
        }

        ///<summary>
        ///
        ///</summary>
        ///<param name="position"></param>
        public PiecePosition(string position)
        {
            position = position.ToLower();
            this.X = position[0] - 'a';
            this.Y = position[1] - '1';
        }

        ///<summary>
        ///
        ///</summary>
        ///<param name="piecePosition"></param>
        public PiecePosition(PiecePosition piecePosition)
        {
            this.X = piecePosition.X;
            this.Y = piecePosition.Y;
        }

        ///<summary>
        ///
        ///</summary>
        public int X { get; set; }

        ///<summary>
        ///
        ///</summary>
        public int Y { get; set; }

        #region IEquatable<PiecePosition> Members

        ///<summary>
        ///
        ///</summary>
        ///<param name="other"></param>
        ///<returns></returns>
        public bool Equals(PiecePosition other)
        {
            return this.X == other.X && this.Y == other.Y;
        }

        #endregion

        ///<summary>
        ///
        ///</summary>
        ///<returns></returns>
        public override int GetHashCode()
        {
            return this.X * 10 + this.Y;
        }

        ///<summary>
        ///Affiche une position selon la norme international.
        ///</summary>
        ///<returns></returns>
        public override string ToString()
        {
            return string.Concat((char) (this.X + 'a'), (char) (this.Y + '1'));
        }
    }
}